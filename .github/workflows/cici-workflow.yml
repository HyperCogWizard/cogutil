# .github/workflows/cici-workflow.yml

name: CICI Workflow Y

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  CCACHE_DIR: /ws/ccache
  MAKEFLAGS: -j2

jobs:
  build:
    name: Build OpenCog Components
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the main repository (if applicable)
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Install necessary packages
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git libssl-dev libpq-dev

      # Step 3: Clone and build cogutil
      - name: Clone cogutil
        run: |
          git clone --depth 1 https://github.com/opencog/cogutil /ws/cogutil

      - name: Build cogutil
        run: |
          mkdir -p /ws/cogutil/build
          cd /ws/cogutil/build
          cmake ..
          make
          sudo make install
          sudo ldconfig

      # Step 4: Clone and build atomspace
      - name: Clone atomspace
        run: |
          git clone --depth 1 https://github.com/opencog/atomspace /ws/atomspace

      - name: Build atomspace
        run: |
          mkdir -p /ws/atomspace/build
          cd /ws/atomspace/build
          cmake ..
          make
          sudo make install
          sudo ldconfig

      # Step 5: Clone and build cogserver
      - name: Clone cogserver
        run: |
          git clone --depth 1 https://github.com/opencog/cogserver /ws/cogserver

      - name: Build cogserver
        run: |
          mkdir -p /ws/cogserver/build
          cd /ws/cogserver/build
          cmake ..
          make
          sudo make install
          sudo ldconfig

      # Step 6: Clone and build attention
      - name: Clone attention
        run: |
          git clone --depth 1 https://github.com/opencog/attention /ws/attention

      - name: Build attention
        run: |
          mkdir -p /ws/attention/build
          cd /ws/attention/build
          cmake ..
          make
          sudo make install
          sudo ldconfig

      # Step 7: Clone and build unify
      - name: Clone unify
        run: |
          git clone --depth 1 https://github.com/opencog/unify /ws/unify

      - name: Build unify
        run: |
          mkdir -p /ws/unify/build
          cd /ws/unify/build
          cmake ..
          make
          sudo make install
          sudo ldconfig

      # Step 8: Clone and build ure
      - name: Clone ure
        run: |
          git clone --depth 1 https://github.com/opencog/ure /ws/ure

      - name: Build ure
        run: |
          mkdir -p /ws/ure/build
          cd /ws/ure/build
          cmake ..
          make
          sudo make install
          sudo ldconfig

      # Step 9: Clone and build miner
      - name: Clone miner
        run: |
          git clone --depth 1 https://github.com/opencog/miner /ws/miner

      - name: Build miner
        run: |
          mkdir -p /ws/miner/build
          cd /ws/miner/build
          cmake ..
          make
          sudo make install
          sudo ldconfig

      # Step 10: Clone and build asmoses
      - name: Clone asmoses
        run: |
          git clone --depth 1 https://github.com/opencog/asmoses /ws/asmoses

      - name: Build asmoses
        run: |
          mkdir -p /ws/asmoses/build
          cd /ws/asmoses/build
          cmake ..
          make
          sudo make install
          sudo ldconfig

      # Step 11: Clone and build opencog
      - name: Clone opencog
        run: |
          git clone --depth 1 https://github.com/opencog/opencog /ws/opencog

      - name: Build opencog
        run: |
          mkdir -p /ws/opencog/build
          cd /ws/opencog/build
          cmake ..
          make
          sudo make install
          sudo ldconfig

      # Step 12: Clone and build package
      - name: Clone package
        run: |
          git clone --depth 1 https://github.com/opencog/package /ws/package

      - name: Build package
        run: |
          mkdir -p /ws/package/build
          cd /ws/package/build
          cmake ..
          make
          sudo make install
          sudo ldconfig

      # Step 13: Run tests for opencog
      - name: Run Tests
        run: |
          cd /ws/opencog/build
          make check ARGS="$MAKEFLAGS"

      # Step 14: Print test log
      - name: Print Test Log
        if: always()
        run: |
          cat /ws/opencog/build/tests/Testing/Temporary/LastTest.log

      # Step 15: Build Debian package
      - name: Build Debian Package
        run: |
          cd /ws/cogutil/build
          make package

      # Step 16: Upload package artifacts
      - name: Upload Package Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: /ws/cogutil/build/packages/
